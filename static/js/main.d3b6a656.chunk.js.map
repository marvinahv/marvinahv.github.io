{"version":3,"sources":["components/Project.module.css","components/Project.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","props","end","date","period","start","className","styles","project","projectName","name","projectRole","role","projectPeriod","employer","projectEmployer","projectDesc","desc","projectHighlights","highlights","map","highlight","index","projectHighlight","key","projectHighlightDesc","tech","technology","projectHighlightTech","App","state","projects","window","fetch","then","response","json","data","setState","style","marginTop","this","Project","React","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0EACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,cAAgB,+BAA+B,YAAc,6BAA6B,cAAgB,+BAA+B,YAAc,6BAA6B,iBAAmB,kCAAkC,kBAAoB,mCAAmC,qBAAuB,sCAAsC,qBAAuB,sCAAsC,sBAAwB,uCAAuC,YAAc,6BAA6B,gBAAkB,iCAAiC,oBAAsB,uC,4MCEnnB,WAACC,GACd,IAAMC,EAAMD,EAAME,KAAKD,KAAO,UACxBE,EAAM,UAAMH,EAAME,KAAKE,MAAjB,cAA4BH,GAIxC,OACE,yBAAKI,UAAWC,IAAOC,SACrB,wBAAIF,UAAWC,IAAOE,aACnBR,EAAMS,KACP,0BAAMJ,UAAWC,IAAOI,aAAxB,YAEGV,EAAMW,OAIX,yBAAKN,UAAWC,IAAOM,eACnBZ,EAAMa,UACN,0BAAMR,UAAWC,IAAOQ,iBACrBd,EAAMa,UAHb,YAOGV,GAGH,uBAAGE,UAAWC,IAAOS,aAAa,2BAAIf,EAAMgB,OAE5C,yBAAKX,UAAWC,IAAOW,mBACnBjB,EAAMkB,WAAWC,KAAI,SAACC,EAAWC,GAAZ,OACrB,yBAAKhB,UAAWC,IAAOgB,iBAAkBC,IAAKF,GAC5C,uBAAGhB,UAAWC,IAAOkB,sBAClBJ,EAAUJ,KADb,YAGII,EAAUK,KAAKN,KAAI,SAACO,GAAD,OACnB,0BAAMrB,UAAWC,IAAOqB,qBAAsBJ,IAAKG,GAAaA,cCCjEE,G,wDAjCb,WAAY5B,GAAQ,IAAD,8BACjB,cAAMA,IACD6B,MAAQ,CACXC,SAAU,IAHK,E,gEAQE,IAAD,OAClBC,OAAOC,MAAM,aAAaC,MAAK,SAACC,GAC9B,OAAOA,EAASC,UACfF,MAAK,SAACG,GACP,EAAKC,SAAS,CAAEP,SAAUM,EAAKN,gB,+BAMjC,OACE,yBAAKzB,UAAU,OACb,gEACA,6CAEA,yBAAKiC,MAAO,CAAEC,UAAW,UACrBC,KAAKX,MAAMC,SAASX,KAAI,SAACZ,GAAD,OACxB,kBAACkC,EAAD,iBAAalC,EAAb,CAAsBgB,IAAKhB,EAAQE,iB,GA3B7BiC,IAAMC,YCQJC,QACW,cAA7Bb,OAAOc,SAASC,UAEe,UAA7Bf,OAAOc,SAASC,UAEhBf,OAAOc,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,MAAK,SAAAsB,GACjCA,EAAaC,kB","file":"static/js/main.d3b6a656.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"project\":\"Project_project__1PEBx\",\"projectPeriod\":\"Project_projectPeriod__c0Z4g\",\"projectName\":\"Project_projectName__176WS\",\"projectClient\":\"Project_projectClient__1rU2J\",\"projectDesc\":\"Project_projectDesc__3BjQa\",\"projectHighlight\":\"Project_projectHighlight__2jLL3\",\"projectHighlights\":\"Project_projectHighlights__2cn9t\",\"projectHighlightDesc\":\"Project_projectHighlightDesc__3rwDs\",\"projectHighlightTech\":\"Project_projectHighlightTech__3UOoX\",\"projectHighlightsTech\":\"Project_projectHighlightsTech__1GSLR\",\"projectRole\":\"Project_projectRole__1rISg\",\"projectEmployer\":\"Project_projectEmployer__39mfN\",\"projectTechnologies\":\"Project_projectTechnologies__2otJe\"};","import React from 'react';\nimport styles from './Project.module.css';\n\nexport default (props) => {\n  const end = props.date.end || 'present';\n  const period = `${props.date.start} - ${end}`;\n\n  // UI\n  //\n  return (\n    <div className={styles.project}>\n      <h3 className={styles.projectName}>\n        {props.name}\n        <span className={styles.projectRole}>\n          &nbsp;|&nbsp;\n          {props.role}\n        </span>\n      </h3>\n\n      <div className={styles.projectPeriod}>\n        { props.employer &&\n          <span className={styles.projectEmployer}>\n            {props.employer}\n          </span>\n        }\n        &nbsp;|&nbsp;\n        {period}\n      </div>\n\n      <p className={styles.projectDesc}><b>{props.desc}</b></p>\n\n      <div className={styles.projectHighlights}>\n        { props.highlights.map((highlight, index) =>\n          <div className={styles.projectHighlight} key={index}>\n            <p className={styles.projectHighlightDesc}>\n              {highlight.desc}\n              &nbsp;|&nbsp;\n              { highlight.tech.map((technology) =>\n                <span className={styles.projectHighlightTech} key={technology}>{technology}</span>\n              )}\n            </p>\n          </div>\n        )}\n      </div>\n    </div>\n  )\n}\n","import React from 'react';\nimport Project from './components/Project.js';\nimport \"./App.css\";\n\nclass App extends React.Component {\n  \n  constructor(props) {\n    super(props);\n    this.state = {\n      projects: []\n    };\n  }\n  \n  \n  componentDidMount() {\n    window.fetch('data.json').then((response) => {\n      return response.json()\n    }).then((data) => {\n      this.setState({ projects: data.projects });\n    });\n  }\n  \n  \n  render() {\n    return (\n      <div className=\"App\" >\n        <h1>Marvin Alejandro Herrera Vizuett</h1>\n        <h2>cv | projects</h2>\n        \n        <div style={{ marginTop: '2.5em' }}>\n          { this.state.projects.map((project) =>\n            <Project {...project} key={project.name} />\n          )}\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}